{"ast":null,"code":"var _jsxFileName = \"/Users/antonynyagah/Desktop/Event-Booker/frontend/src/pages/Bookings.js\";\nimport React, { Component } from 'react';\nimport Spinner from '../components/spinner/spinner';\nimport AuthContext from '../context/auth-context';\n\nclass BookingsPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false,\n      bookings: []\n    };\n\n    this.fetchBookings = () => {\n      this.setState({\n        isLoading: true\n      });\n      const requestBody = {\n        query: \"\\n          query {\\n            bookings {\\n              _id\\n             createdAt\\n             event {\\n               _id\\n               title\\n               date\\n             }\\n            }\\n          }\\n        \"\n      };\n      fetch('http://localhost:8000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const bookings = resData.data.bookings;\n        this.setState({\n          bookings: bookings,\n          isLoading: false\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          isLoading: false\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.fetchBookings();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }) : React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, this.state.bookings.map(booking => React.createElement(\"li\", {\n      key: booking._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, booking.event.title, \" -\", ' ', new Date(booking.createdAt).toLocaleDateString()))));\n  }\n\n}\n\nBookingsPage.contextType = AuthContext;\nexport default BookingsPage;","map":{"version":3,"sources":["/Users/antonynyagah/Desktop/Event-Booker/frontend/src/pages/Bookings.js"],"names":["React","Component","Spinner","AuthContext","BookingsPage","state","isLoading","bookings","fetchBookings","setState","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","context","token","then","res","status","Error","json","resData","data","catch","err","console","log","componentDidMount","render","map","booking","_id","event","title","Date","createdAt","toLocaleDateString","contextType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,OAAP,MAAoB,+BAApB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;;AAEA,MAAMC,YAAN,SAA2BH,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACnCI,KADmC,GAC3B;AACNC,MAAAA,SAAS,EAAE,KADL;AAENC,MAAAA,QAAQ,EAAE;AAFJ,KAD2B;;AAAA,SAYnCC,aAZmC,GAYnB,MAAM;AACpB,WAAKC,QAAL,CAAc;AAAEH,QAAAA,SAAS,EAAE;AAAb,OAAd;AACA,YAAMI,WAAW,GAAG;AAClBC,QAAAA,KAAK;AADa,OAApB;AAgBAC,MAAAA,KAAK,CAAC,+BAAD,EAAkC;AACrCC,QAAAA,MAAM,EAAE,MAD6B;AAErCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAF+B;AAGrCO,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAY,KAAKC,OAAL,CAAaC;AAFjC;AAH4B,OAAlC,CAAL,CAQGC,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACf,cAAMnB,QAAQ,GAAGmB,OAAO,CAACC,IAAR,CAAapB,QAA9B;AACA,aAAKE,QAAL,CAAc;AAAEF,UAAAA,QAAQ,EAAEA,QAAZ;AAAsBD,UAAAA,SAAS,EAAE;AAAjC,SAAd;AACD,OAjBH,EAkBGsB,KAlBH,CAkBSC,GAAG,IAAI;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAAKpB,QAAL,CAAc;AAAEH,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD,OArBH;AAsBD,KApDkC;AAAA;;AAQnC0B,EAAAA,iBAAiB,GAAG;AAClB,SAAKxB,aAAL;AACD;;AA4CDyB,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK5B,KAAL,CAAWC,SAAX,GACC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKD,KAAL,CAAWE,QAAX,CAAoB2B,GAApB,CAAwBC,OAAO,IAC9B;AAAI,MAAA,GAAG,EAAEA,OAAO,CAACC,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,OAAO,CAACE,KAAR,CAAcC,KADjB,QAC0B,GAD1B,EAEG,IAAIC,IAAJ,CAASJ,OAAO,CAACK,SAAjB,EAA4BC,kBAA5B,EAFH,CADD,CADH,CAJJ,CADF;AAgBD;;AAvEkC;;AAA/BrC,Y,CAMGsC,W,GAAcvC,W;AAoEvB,eAAeC,YAAf","sourcesContent":["import React, { Component } from 'react';\n\nimport Spinner from '../components/spinner/spinner';\nimport AuthContext from '../context/auth-context';\n\nclass BookingsPage extends Component {\n  state = {\n    isLoading: false,\n    bookings: []\n  };\n\n  static contextType = AuthContext;\n\n  componentDidMount() {\n    this.fetchBookings();\n  }\n\n  fetchBookings = () => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            bookings {\n              _id\n             createdAt\n             event {\n               _id\n               title\n               date\n             }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const bookings = resData.data.bookings;\n        this.setState({ bookings: bookings, isLoading: false });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <ul>\n            {this.state.bookings.map(booking => (\n              <li key={booking._id}>\n                {booking.event.title} -{' '}\n                {new Date(booking.createdAt).toLocaleDateString()}\n              </li>\n            ))}\n          </ul>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default BookingsPage;"]},"metadata":{},"sourceType":"module"}