{"ast":null,"code":"var _jsxFileName = \"/Users/antonynyagah/Desktop/Event-Booker/frontend/src/pages/Bookings.js\";\nimport React, { Component } from 'react';\nimport Spinner from '../components/spinner/spinner';\nimport AuthContext from '../context/auth-context';\nimport BookingList from '../components/bookings/bookinglist/bookinglist';\nimport BookingsChart from '../components/bookings/bookingschart/bookingschart';\nimport BookingsControls from '../components/bookings/bookingscontrols/bookingscontrols';\n\nclass BookingsPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false,\n      bookings: [],\n      outputType: 'list'\n    };\n\n    this.fetchBookings = () => {\n      this.setState({\n        isLoading: true\n      });\n      const requestBody = {\n        query: \"\\n          query {\\n            bookings {\\n              _id\\n             createdAt\\n             event {\\n               _id\\n               title\\n               date\\n               price\\n             }\\n            }\\n          }\\n        \"\n      };\n      fetch('http://localhost:8000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const bookings = resData.data.bookings;\n        this.setState({\n          bookings: bookings,\n          isLoading: false\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          isLoading: false\n        });\n      });\n    };\n\n    this.deleteBookingHandler = bookingId => {\n      this.setState({\n        isLoading: true\n      });\n      const requestBody = {\n        query: \"\\n          mutation CancelBooking($id: ID!) {\\n            cancelBooking(bookingId: $id) {\\n            _id\\n             title\\n            }\\n          }\\n        \",\n        variables: {\n          id: bookingId\n        }\n      };\n      fetch('http://localhost:8000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        this.setState(prevState => {\n          const updatedBookings = prevState.bookings.filter(booking => {\n            return booking._id !== bookingId;\n          });\n          return {\n            bookings: updatedBookings,\n            isLoading: false\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          isLoading: false\n        });\n      });\n    };\n\n    this.changeOutputTypeHandler = outputType => {\n      if (outputType === 'list') {\n        this.setState({\n          outputType: 'list'\n        });\n      } else {\n        this.setState({\n          outputType: 'chart'\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.fetchBookings();\n  }\n\n  render() {\n    let content = React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    });\n\n    if (!this.state.isLoading) {\n      content = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(BookingsControls, {\n        activeOutputType: this.state.outputType,\n        onChange: this.changeOutputTypeHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, this.state.outputType === 'list' ? React.createElement(BookingList, {\n        bookings: this.state.bookings,\n        onDelete: this.deleteBookingHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }) : React.createElement(BookingsChart, {\n        bookings: this.state.bookings,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      })));\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, content);\n  }\n\n}\n\nBookingsPage.contextType = AuthContext;\nexport default BookingsPage;","map":{"version":3,"sources":["/Users/antonynyagah/Desktop/Event-Booker/frontend/src/pages/Bookings.js"],"names":["React","Component","Spinner","AuthContext","BookingList","BookingsChart","BookingsControls","BookingsPage","state","isLoading","bookings","outputType","fetchBookings","setState","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","context","token","then","res","status","Error","json","resData","data","catch","err","console","log","deleteBookingHandler","bookingId","variables","id","prevState","updatedBookings","filter","booking","_id","changeOutputTypeHandler","componentDidMount","render","content","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Spinner from '../components/spinner/spinner';\nimport AuthContext from '../context/auth-context';\nimport BookingList from '../components/bookings/bookinglist/bookinglist';\nimport BookingsChart from '../components/bookings/bookingschart/bookingschart';\nimport BookingsControls from '../components/bookings/bookingscontrols/bookingscontrols';\n\n\nclass BookingsPage extends Component {\n  state = {\n    isLoading: false,\n    bookings: [],\n    outputType: 'list'\n  };\n\n  static contextType = AuthContext;\n\n  componentDidMount() {\n    this.fetchBookings();\n  }\n\n  fetchBookings = () => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            bookings {\n              _id\n             createdAt\n             event {\n               _id\n               title\n               date\n               price\n             }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const bookings = resData.data.bookings;\n        this.setState({ bookings: bookings, isLoading: false });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  deleteBookingHandler = bookingId => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          mutation CancelBooking($id: ID!) {\n            cancelBooking(bookingId: $id) {\n            _id\n             title\n            }\n          }\n        `,\n      variables: {\n        id: bookingId\n      }\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevState => {\n          const updatedBookings = prevState.bookings.filter(booking => {\n            return booking._id !== bookingId;\n          });\n          return { bookings: updatedBookings, isLoading: false };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  changeOutputTypeHandler = outputType => {\n    if (outputType === 'list') {\n      this.setState({ outputType: 'list' });\n    } else {\n      this.setState({ outputType: 'chart' });\n    }\n  };\n\n  render() {\n    let content = <Spinner />;\n    if (!this.state.isLoading) {\n      content = (\n        <React.Fragment>\n          <BookingsControls\n            activeOutputType={this.state.outputType}\n            onChange={this.changeOutputTypeHandler}\n          />\n          <div>\n            {this.state.outputType === 'list' ? (\n              <BookingList\n                bookings={this.state.bookings}\n                onDelete={this.deleteBookingHandler}\n              />\n            ) : (\n              <BookingsChart bookings={this.state.bookings} />\n            )}\n          </div>\n        </React.Fragment>\n      );\n    }\n    return <React.Fragment>{content}</React.Fragment>;\n  }\n}\n\nexport default BookingsPage;"]},"metadata":{},"sourceType":"module"}