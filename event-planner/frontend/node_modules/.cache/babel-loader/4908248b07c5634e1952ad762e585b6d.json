{"ast":null,"code":"var _jsxFileName = \"/Users/antonynyagah/Desktop/Event-Booker/frontend/src/pages/Events.js\";\nimport React, { Component } from 'react';\nimport Modal from '../components/modal/modal';\nimport Backdrop from '../components/backdrop/backdrop';\nimport EventList from '../components/events/eventlist/eventlist';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Events.css';\n\nclass EventsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      events: [],\n      isLoading: false,\n      selectedEvent: null\n    };\n\n    this.startCreateEventHandler = () => {\n      this.setState({\n        creating: true\n      });\n    };\n\n    this.modalConfirmHandler = () => {\n      this.setState({\n        creating: false\n      });\n      const title = this.titleElRef.current.value;\n      const price = +this.priceElRef.current.value;\n      const date = this.dateElRef.current.value;\n      const description = this.descriptionElRef.current.value;\n\n      if (title.trim().length === 0 || price <= 0 || date.trim().length === 0 || description.trim().length === 0) {\n        return;\n      }\n\n      const event = {\n        title,\n        price,\n        date,\n        description\n      };\n      console.log(event);\n      const requestBody = {\n        query: \"\\n          mutation {\\n            createEvent(eventInput: {title: \\\"\".concat(title, \"\\\", description: \\\"\").concat(description, \"\\\", price: \").concat(price, \", date: \\\"\").concat(date, \"\\\"}) {\\n              _id\\n              title\\n              description\\n              date\\n              price\\n            }\\n          }\\n        \")\n      };\n      const token = this.context.token;\n      fetch('http://localhost:8000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        this.setState(prevState => {\n          const updatedEvents = [...prevState.events];\n          updatedEvents.push({\n            _id: resData.data.createEvent._id,\n            title: resData.data.createEvent.title,\n            description: resData.data.createEvent.description,\n            date: resData.data.createEvent.date,\n            price: resData.data.createEvent.price,\n            creator: {\n              _id: this.context.userId\n            }\n          });\n          return {\n            events: updatedEvents\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        selectedEvent: null\n      });\n    };\n\n    this.showDetailHandler = eventId => {\n      this.setState(prevState => {\n        const selectedEvent = prevState.events.find(e => e._id === eventId);\n        return {\n          selectedEvent: selectedEvent\n        };\n      });\n    };\n\n    this.bookEventHandler = () => {};\n\n    this.titleElRef = React.createRef();\n    this.priceElRef = React.createRef();\n    this.dateElRef = React.createRef();\n    this.descriptionElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchEvents();\n  }\n\n  fetchEvents() {\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query {\\n            events {\\n              _id\\n              title\\n              description\\n              date\\n              price\\n              creator {\\n                _id\\n                email\\n              }\\n            }\\n          }\\n        \"\n    };\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const events = resData.data.events;\n      this.setState({\n        events: events,\n        isLoading: false\n      });\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        isLoading: false\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, (this.state.creating || this.state.selectedEvent) && React.createElement(Backdrop, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), this.state.creating && React.createElement(Modal, {\n      title: \"Add Event\",\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Title\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      ref: this.titleElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"price\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Price\"), React.createElement(\"input\", {\n      type: \"number\",\n      id: \"price\",\n      ref: this.priceElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Date\"), React.createElement(\"input\", {\n      type: \"datetime-local\",\n      id: \"date\",\n      ref: this.dateElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Description\"), React.createElement(\"textarea\", {\n      id: \"description\",\n      rows: \"4\",\n      ref: this.descriptionElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    })))), this.state.selectedEvent && React.createElement(Modal, {\n      title: this.state.selectedEvent.title,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.bookEventHandler,\n      confirmText: \"Book\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, this.state.selectedEvent.title), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"$\", this.state.selectedEvent.price, \" -\", ' ', new Date(this.state.selectedEvent.date).toLocaleDateString()), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, this.state.selectedEvent.description)), this.context.token && React.createElement(\"div\", {\n      className: \"events-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"Share your own Events!\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.startCreateEventHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Create Event\")), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }) : React.createElement(EventList, {\n      events: this.state.events,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }));\n  }\n\n}\n\nEventsPage.contextType = AuthContext;\nexport default EventsPage;","map":{"version":3,"sources":["/Users/antonynyagah/Desktop/Event-Booker/frontend/src/pages/Events.js"],"names":["React","Component","Modal","Backdrop","EventList","Spinner","AuthContext","EventsPage","constructor","props","state","creating","events","isLoading","selectedEvent","startCreateEventHandler","setState","modalConfirmHandler","title","titleElRef","current","value","price","priceElRef","date","dateElRef","description","descriptionElRef","trim","length","event","console","log","requestBody","query","token","context","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","prevState","updatedEvents","push","_id","data","createEvent","creator","userId","catch","err","modalCancelHandler","showDetailHandler","eventId","find","e","bookEventHandler","createRef","componentDidMount","fetchEvents","render","Date","toLocaleDateString","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Modal from '../components/modal/modal';\nimport Backdrop from '../components/backdrop/backdrop';\nimport EventList from '../components/events/eventlist/eventlist';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Events.css';\n\nclass EventsPage extends Component {\n  state = {\n    creating: false,\n    events: [],\n    isLoading: false,\n    selectedEvent: null\n  };\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.titleElRef = React.createRef();\n    this.priceElRef = React.createRef();\n    this.dateElRef = React.createRef();\n    this.descriptionElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchEvents();\n  }\n\n  startCreateEventHandler = () => {\n    this.setState({ creating: true });\n  };\n\n  modalConfirmHandler = () => {\n    this.setState({ creating: false });\n    const title = this.titleElRef.current.value;\n    const price = +this.priceElRef.current.value;\n    const date = this.dateElRef.current.value;\n    const description = this.descriptionElRef.current.value;\n\n    if (\n      title.trim().length === 0 ||\n      price <= 0 ||\n      date.trim().length === 0 ||\n      description.trim().length === 0\n    ) {\n      return;\n    }\n\n    const event = { title, price, date, description };\n    console.log(event);\n\n    const requestBody = {\n      query: `\n          mutation {\n            createEvent(eventInput: {title: \"${title}\", description: \"${description}\", price: ${price}, date: \"${date}\"}) {\n              _id\n              title\n              description\n              date\n              price\n            }\n          }\n        `\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevState => {\n          const updatedEvents = [...prevState.events];\n          updatedEvents.push({\n            _id: resData.data.createEvent._id,\n            title: resData.data.createEvent.title,\n            description: resData.data.createEvent.description,\n            date: resData.data.createEvent.date,\n            price: resData.data.createEvent.price,\n            creator: {\n              _id: this.context.userId\n            }\n          });\n          return { events: updatedEvents };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, selectedEvent: null });\n  };\n\n  fetchEvents() {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            events {\n              _id\n              title\n              description\n              date\n              price\n              creator {\n                _id\n                email\n              }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const events = resData.data.events;\n        this.setState({ events: events, isLoading: false });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  }\n\n  showDetailHandler = eventId => {\n    this.setState(prevState => {\n      const selectedEvent = prevState.events.find(e => e._id === eventId);\n      return { selectedEvent: selectedEvent };\n    });\n  };\n\n  bookEventHandler = () => {};\n\n  render() {\n    return (\n      <React.Fragment>\n        {(this.state.creating || this.state.selectedEvent) && <Backdrop />}\n        {this.state.creating && (\n          <Modal\n            title=\"Add Event\"\n            canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmHandler}\n            confirmText=\"Confirm\"\n          >\n            <form>\n              <div className=\"form-control\">\n                <label htmlFor=\"title\">Title</label>\n                <input type=\"text\" id=\"title\" ref={this.titleElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"price\">Price</label>\n                <input type=\"number\" id=\"price\" ref={this.priceElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"date\">Date</label>\n                <input type=\"datetime-local\" id=\"date\" ref={this.dateElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"description\">Description</label>\n                <textarea\n                  id=\"description\"\n                  rows=\"4\"\n                  ref={this.descriptionElRef}\n                />\n              </div>\n            </form>\n          </Modal>\n        )}\n        {this.state.selectedEvent && (\n          <Modal\n            title={this.state.selectedEvent.title}\n            canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.bookEventHandler}\n            confirmText=\"Book\"\n          >\n            <h1>{this.state.selectedEvent.title}</h1>\n            <h2>\n              ${this.state.selectedEvent.price} -{' '}\n              {new Date(this.state.selectedEvent.date).toLocaleDateString()}\n            </h2>\n            <p>{this.state.selectedEvent.description}</p>\n          </Modal>\n        )}\n        {this.context.token && (\n          <div className=\"events-control\">\n            <p>Share your own Events!</p>\n            <button className=\"btn\" onClick={this.startCreateEventHandler}>\n              Create Event\n            </button>\n          </div>\n        )}\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <EventList\n            events={this.state.events}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default EventsPage;"]},"metadata":{},"sourceType":"module"}